#!/bin/bash

##############################################################################
# Declarations: Globals that hold the parser state
#               including registration and parsed values
##############################################################################
declare -Ag OPTS
declare -Ag NUM_OPT_ARGS
declare -Ag NUM_POS_ARGS
declare -Ag REQUIRED
declare -Ag DEFAULT
declare -Ag ACTION
declare -Ag STORE
declare -Ag INSTANCES
declare -Ag POST_PARSE
declare -ag POS_ORDER

declare -Ag ARG_VALUES
declare -Ag OPT_COUNTS

declare -Ag ARGS
declare -ag REGISTRATIONS
declare -ag REG_ERRORS


###############################################################################
# Main: main functions to control parsing
###############################################################################
parse() {
  local -n OUTPUT="$1" ; shift 1
  local -a POS_RAW

  local has_err='false'
  for i in "${!REG_ERRORS[@]}"; do
    local reg="${REGISTRATIONS[i]}"
    local err="${REG_ERRORS[i]}"
    if [[ ! -z "${err}" ]]; then
      printf '%s. %s\n' "${i}" "${reg}" >&2
      printf '%s\n\n' "${err}" >&2
      has_err='true'
    fi
  done
  if $has_err; then
    return 1
  fi

  while (( "$#" )); do 
    # Registered options
    for flag in "${!OPTS[@]}"; do
      local opts="${OPTS[${flag}]}"
      local num_args="${NUM_OPT_ARGS[${flag}]}"
 
      local regex="^(${opts})$"
      if [[ "$1" =~ $regex ]]; then
        consume_flag "${flag}" "$@" || return 1
        shift $(( num_args + 1 ))
        continue 2
      fi
    done
    
    # Default options
    case "$1" in
      -h|--help)
        usage
        exit 0
        ;;
      --) # End argument parsing
        shift
        POS_RAW+=("$@")
        break
        ;;
      -*|--*=) # unsupported flags
        echo "Error: Unsupported flag $1" >&2
        return 1
        ;;
      *) # preserve positional arguments
        POS_RAW+=("$1")
        shift
        ;;
    esac
  done
  
  consume_pos "${POS_RAW[@]}" || return 1
  validate_opts || return 1
  post_parse

  copy_array ARG_VALUES OUTPUT
}


###############################################################################
# Registration: functions to register optional and positional arguments
#               for the parser
###############################################################################

register_base() {
  local -r name="$1"
  local -r opts="$2"

  REGISTRATIONS+=("${name:-<no name>} ${opts}")
  REG_ERRORS+=('')

  check_base "${name}" || return 1

  ARGS["${name}"]='true'
}

register_opt_base() {
  local -r name="$1"
  local -r opts="$2"
  local -r num_args="${3:-0}"
  local -r required="${4:-false}"
  local -r default="$5"
  local -r store="$6"
  local -r instances="${7:-0}"
  local -r action="${8:-store}"

  register_base "${name}" "${opts}" || return 1
  check_opt_base "${name}" "${opts}" || return 1

  OPTS["${name}"]="${opts}"
  NUM_OPT_ARGS["${name}"]="${num_args}"
  REQUIRED["${name}"]="${required}"
  DEFAULT["${name}"]="${default}"
  STORE["${name}"]="${store}"
  INSTANCES["${name}"]="${instances}"
  ACTION["${name}"]="${action}"
  POST_PARSE["${name}"]=''

  ARG_VALUES["${name}"]=''
  OPT_COUNTS["${name}"]=0
}

register_opt_from_dict() {
  local -r name="$1"
  local -r opts="$2"
  local -n _options="$3"

  # Basic registration
  register_opt_base "${name}" "${opts}" || return 1
  
  # Apply setting overrides
  for option in "${!_options[@]}"; do
    local option_val="${_options[${option}]}"

    # Check for registration errors
    check_opt_from_dict "${option}" "${option_val}" || return 1

    # Set to global
    printf -v "${option}"["${name}"] "${option_val}"

    # Add setting to registration record
    REGISTRATIONS[-1]="${REGISTRATIONS[-1]} [${option}]=${option_val}"
  done
}

register_opt_from_line() {
  local -r name="$1"
  local -r opts="$2"
  local -r option_str="$3"

  eval local -A options=( "${option_str}" )
  register_opt_from_dict "${name}" "${opts}" options
}

register_opt_bool() {
  local -r name="$1"
  local -r opts="$2"
  register_opt_from_line "${name}" "${opts}" '
    [DEFAULT]=false
    [STORE]=true
  '
}

register_opt_with_arg() {
  local -r name="$1"
  local -r opts="$2"
  register_opt_from_line "${name}" "${opts}" '
    [NUM_OPT_ARGS]=1
  '
}

register_opt_count() {
  local -r name="$1"
  local -r opts="$2"
  register_opt_from_line "${name}" "${opts}" '
    [DEFAULT]=0
    [ACTION]=increment
    [STORE]=1
  '
}

register_pos() {
  local -r name="$1"
  local -r num_args="${2:-0}"
  local -r required="${3:-'true'}"
  local -r default="${4}"

  register_base "${name}" || return 1
  check_pos "${name}" || return 1

  NUM_POS_ARGS["${name}"]="${num_args}"
  REQUIRED["${name}"]="${required}"
  DEFAULT["${name}"]="${default}"
  POS_ORDER+=("${name}")

  ARG_VALUES["${name}"]=''
}

register_err() {
  local -r msg="$1"
  local -r usage="$2"
  if [[ -z "${REG_ERRORS[-1]}" ]]; then
    REG_ERRORS[-1]="${usage}"
  fi
  REG_ERRORS[-1]="${REG_ERRORS[-1]}
$(echo ${msg} | indent)"
}


###############################################################################
# Checking: functions to check the registered args before we start parsing
###############################################################################

check_base() {
  local -r name="$1"

  if [[ -z "${name}" ]]; then
    register_err \
      "register_base: Missing required field 'name'" \
      "$(usage_register_base)"
     return 1
  fi

  if [[ -v ARGS["${name}"] ]] ; then
    register_err \
      "register_base: '${name}' is already registered" \
      "$(usage_register_base)"
    return 1
  fi
}

check_opt_base() {
  local -r name="$1"
  local -r opts="$2"

  if [[ -z "${opts}" ]]; then
    register_err \
      "register_opt_base: Missing required field 'opts'" \
      "$(usage_register_opt_base)"
  fi

   for flag in "${!OPTS[@]}"; do
    if [[ "${opts}" == "${OPTS[${flag}]}" ]]; then
      register_err \
        "register_opt_base: a flag with options '${opts}' is already defined" \
        "$(usage_register_opt_base)"
      return 1
    fi
  done
}

check_opt_from_dict() {
  local -r option="$1"
  local -r option_val="$2"
  
  set | grep "^${option}=" >/dev/null
  local is_defined="$?"

  if (( is_defined != 0 )); then
    register_err \
      "register_opt_from_dict: '${option}' is not a valid flag setting" \
      "$(usage_register_opt_from_dict)"
    return 1
  fi

  if [[ -z "${option_val}" ]]; then
    register_err \
      "register_opt_from_dict: '${option}' requires a setting value" \
      "$(usage_register_opt_from_dict)"
    return 1
  fi
}

check_pos() {
  local -r name="$1"

  if [[ -z "${name}" ]]; then
    register_err \
      "register_pos: Missing required field 'name'" \
      "$(usage_register_pos)"
    return 1
  fi
}

###############################################################################
# Processing: consume registered args from the stream of input
###############################################################################

consume_flag() {
  local -r name="$1" ; shift 2
  
  local num_args="${NUM_OPT_ARGS[${name}]}"

  local -a args=()

  if (( num_args == 0 )); then
    args+=("${STORE[${name}]}")
  fi
  
  while (( "$num_args" )); do
    local arg="$1" ; shift 1

    if [[ -z "${arg}" ]]; then
      missing_args "${OPTS[${name}]}" "${NUM_OPT_ARGS[$name]}" "${args[*]}"
      return 1
    fi

    for flag in "${OPTS[@]}"; do
      if [[ "${arg}" =~ ${flag} ]]; then
        missing_args "${OPTS[${name}]}" "${NUM_OPT_ARGS[$name]}" "${args[*]}"
        return 1
      fi
    done

    args+=("${arg}")
    (( num_args-- ))
  done

  local -r action="${ACTION[${name}]}"
  case "${action}" in
    store)
      ARG_VALUES["${name}"]="${args[@]}"
      ;;
    list)
      ARG_VALUES["${name}"]="${ARG_VALUES[${name}]} ${args[@]}"
      ;;
    increment)
      (( ARG_VALUES["${name}"] += "${args[0]}" ))
      ;;
    *)
      unsupported_action "${name}" "${action}"
      ;;
  esac

  (( OPT_COUNTS["${name}"] += 1 ))
}

consume_pos() {
  for pos in "${POS_ORDER[@]}"; do
    local num_pos_args="${NUM_POS_ARGS[${pos}]}"

    local params=()
    while (( num_pos_args != 0 && $# )); do
      params+=("$1")
      shift 1
      (( num_pos_args-- ))
    done

    if (( num_pos_args > 0 )); then
      missing_pos_args "${pos}" "${num_pos_args}" "${params[*]}"
      return 1
    fi

    ARG_VALUES["${pos}"]="${params[*]}"

    local required="${REQUIRED[${pos}]}"
    if [[ "${required}" == 'true' && -z "${ARG_VALUES[${pos}]}" ]]; then
      missing_required_pos "${pos}"
      return 1
    fi
  done

  if (( $# )); then
    too_many_pos_args
    return 1
  fi
}


###############################################################################
# Validation: functions to validate the parsed args
###############################################################################

validate_opts() {
  # Required
  for flag in "${!REQUIRED[@]}"; do
    local required="${REQUIRED[${flag}]}"
    local value="${ARG_VALUES[${flag}]}"
    if [[ "${required}" == 'true' && -z "${value}" ]]; then
      missing_required "${OPTS[${flag}]}"
      return 1
    fi
  done

  # Instances
  for flag in "${!INSTANCES[@]}"; do
    local max_instances="${INSTANCES[${flag}]}"
    local count="${OPT_COUNTS[${flag}]}"
    if (( max_instances > 0 && count > max_instances )); then
      too_many_instances "${OPTS[${flag}]}" "${count}" "${max_instances}"
      return 1
    fi
  done

  # Defaults
  for flag in "${!ARG_VALUES[@]}"; do
    local value="${ARG_VALUES[${flag}]}"
    local default="${DEFAULT[${flag}]}"
    if [[ -z "${value}" ]]; then
      ARG_VALUES["${flag}"]="${default}"
    fi
  done
}



###############################################################################
# Post-parsing: execute callbacks for each argument
###############################################################################

post_parse() {
  # Post parse funcs
  for flag in "${!POST_PARSE[@]}"; do
    local callback="${POST_PARSE[${flag}]}"
    local opts="${OPTS[${flag}]:-'--'}"
    local val="${ARG_VALUES[${flag}]}"
    if [[ ! -z "${callback}" ]]; then
      "${callback}" "${flag}" "${opts}" "${val}"
    fi
  done
}


###############################################################################
# Error messages: print custom errors to stdout
###############################################################################

missing_args() {
  local -r _name="$1"
  local -r _req="$2"
  local -r _prov="$3"
  printf '%s\n%s\n' \
    "Error: '${_name}' has required arguments: ${_req}" \
    "Provided: ${_prov}" \
    >&2
}

missing_required() {
  local -r _name="$1"
  printf '%s\n' "Error: missing required option: ${_name}" >&2
}

too_many_instances() {
  local -r _name="$1"
  local -r _count="$2"
  local -r _max="$3"
  printf '%s\n%s\n%s\n' \
    "Error: '${_name}' has too many instances." \
    "Given: ${_count}" \
    "Max: ${_max}" \
    >&2
}

missing_pos_args() {
  local -r _name="$1"
  local -r _num="$2"
  local -r _actual="$3"
  printf '%s\n%s\n%s\n' \
    "Error: '${_name}' is missing positional arguments." \
    "Given: ${_actual}" \
    "Required: ${_num}" \
    >&2
}

too_many_pos_args() {
  printf 'Error: too many positional arguments provided\n' >&2
}

missing_required_pos() {
  local -r _name="$1"
  printf '%s\n' "Error: missing required positional argument '${_name}'" >&2
}

unsupported_action() {
  local -r _name="$1"
  local -r _action="$2"
  printf '%s\n' "Error: '${_name}' was called with an unsupported action: ${_action}" >&2
}

registration_errors() {
  printf '%s\n' '!!! Errors encountered registering args'
}


###############################################################################
# Usage: functions to print usage for API functions
###############################################################################

usage_register_base() {
  printf '%s\n%s\n' \
    'Usage: register_base name [opts]' \
    'Registers an argument to be parsed from the command line'
}

usage_register_opt_base() {
  printf '%s%s\n%s\n' 'Usage: register_opt_base name opts [num_args] ' \
    '[required] [default] [store] [instances] [action]' \
    'Registers an optional argument to be parsed from the command line'
}

usage_register_opt_from_dict() {
  printf '%s\n%s' 'Usage: register_opt_from_dict name opts [settings]' \
    'Registers an optional command line argument using provided settings'
}

usage_register_pos() {
  printf '%s\n' \
    'Usage: register_pos name [num_args] [required] [default]' \
    'Registers a positional argument, where:' \
    'num_args: number of positional arguments collected into
          the argument. -1 indicates 0 or more' \
    'required: if true, enough positional arguments must be 
          provided to fill this argument' \
    'default:  value to use if no positional arguments are
          consumed for this argument'
}


###############################################################################
# Utils
###############################################################################

debug() {
  local -n arr="$1"
  printf '\n%s\n' "DEBUG: ${!arr}"
  for flag in "${!arr[@]}"; do
    printf ' [%s]=%s\n' "${flag}" "${arr[${flag}]}"
  done
}

print_all() {
  echo
  echo "Args:"
  for flag in "${!ARG_VALUES[@]}"; do
    printf ' [%s]=%s\n' "${flag}" "${ARG_VALUES[${flag}]}"
  done
}

print_arg() {
  printf '%s\n%s\n' 'Printing an arg!' "$@"
}

indent() {
  sed 's/^/  /'
}

copy_array() {
  local -n in="$1"
  local -n out="$2"

  # Clear existing out array
  for key in "${!out[@]}"; do
    unset out["${key}"]
  done

  # Copy each key-value pair from in to out
  for key in "${!in[@]}"; do
    local val="${in[${key}]}"
    out["${key}"]="${val}"
  done
}

